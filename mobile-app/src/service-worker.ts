/**
 * @fileoverview Service Worker implementation using Workbox
 * Provides offline capabilities, caching strategies, and PWA features.
 * 
 * Features:
 * - Static asset caching with Cache First strategy
 * - Dynamic API caching with Network First strategy
 * - Offline fallback support
 * - Background sync capabilities
 * - Cache cleanup on activation
 */

/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

/**
 * Required Workbox imports for service worker functionality
 * - clientsClaim: Takes control of all clients as soon as the worker activates
 * - ExpirationPlugin: Manages cache expiration and entry limits
 * - precacheAndRoute: Handles precaching of static assets
 * - registerRoute: Defines runtime caching strategies
 */
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

/** Service Worker global scope type definition */
declare const self: ServiceWorkerGlobalScope;

// Take control immediately
clientsClaim();

// Precache all of the assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

/**
 * App Shell routing configuration
 * Handles navigation requests to support single-page application behavior
 * Excludes:
 * - Non-navigation requests
 * - Special routes starting with '_'
 * - URLs with file extensions
 */
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }: { request: Request; url: URL }) => {
    if (request.mode !== 'navigate') {
      return false;
    }

    if (url.pathname.startsWith('/_')) {
      return false;
    }

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

/**
 * Static asset caching configuration
 * Uses Cache First strategy for:
 * - Stylesheets
 * - Scripts
 * - Web Workers
 * Assets are cached for 24 hours with a limit of 50 entries
 */
registerRoute(
  ({ request }) => 
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  new CacheFirst({
    cacheName: 'static-resources',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 24 * 60 * 60, // 24 hours
        maxEntries: 50 // Maximum number of assets to cache
      })
    ]
  })
);

/**
 * Image caching configuration
 * Uses Cache First strategy with:
 * - 7 day cache duration
 * - 60 image entry limit
 * - Successful response caching (status 0 or 200)
 */
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
        maxEntries: 60 // Maximum number of images to cache
      })
    ]
  })
);

/**
 * Dynamic API route caching
 * Uses Network First strategy for critical API endpoints:
 * - Admin routes
 * - Employee data
 * - Time-off requests
 * - Time entries
 * Includes 5-minute cache duration with 100 entry limit
 */
registerRoute(
  ({ url }) => 
    url.pathname.includes('/api/admin/') ||
    url.pathname.includes('/api/employee/') ||
    url.pathname.includes('/api/time-off-requests/') ||
    url.pathname.includes('/api/time-entries/'),
  new NetworkFirst({
    cacheName: 'dynamic-data',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 5 * 60, // 5 minutes
        maxEntries: 100
      })
    ]
  })
);

/**
 * User preferences caching
 * Uses Network First strategy with short cache duration
 * - 1-minute cache lifetime
 * - 10 entry limit
 * Ensures user settings are fresh while providing offline fallback
 */
registerRoute(
  ({ url }) => 
    url.pathname.includes('/api/user/preferences/'),
  new NetworkFirst({
    cacheName: 'user-preferences',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxAgeSeconds: 60, // 1 minute
        maxEntries: 10
      })
    ]
  })
);

/**
 * General API response caching
 * Uses Stale While Revalidate strategy for non-critical API endpoints
 * - 5-minute cache duration
 * - 100 entry limit
 * - Automatic background updates
 */
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new StaleWhileRevalidate({
    cacheName: 'api-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200]
      }),
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 5 * 60 // 5 minutes
      })
    ]
  })
);

/**
 * Security origin validation
 * Ensures service worker only processes messages from the application origin
 */
const ALLOWED_ORIGIN = self.location.origin;

/**
 * Message event handler
 * Processes:
 * - Skip waiting requests for updates
 * - Logout events for cache clearing
 * Includes origin validation for security
 */
self.addEventListener('message', (event) => {
  // Check if the message is from our application origin
  if (event.origin !== ALLOWED_ORIGIN) {
    console.warn(`Rejected message from untrusted origin: ${event.origin}`);
    return;
  }

  if (event.data?.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }

  if (event.data && event.data.type === 'LOGOUT') {
    // Clear user-specific caches
    caches.delete('user-preferences')
      .then(() => {
        console.log('User preferences cache cleared');
      })
      .catch((error) => {
        console.error('Error clearing user preferences cache:', error);
      });
  }
});

/**
 * Offline fallback handler
 * Provides offline experience for navigation requests:
 * - Attempts network request first
 * - Falls back to cached index.html
 * - Returns 404 if offline page not found
 */
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      (async () => {
        try {
          const response = await fetch(event.request);
          return response;
        } catch (error) {
          const cache = await caches.open('offline-fallback');
          const cachedResponse = await cache.match('/index.html');
          return cachedResponse || new Response('Offline page not found', {
            status: 404,
            statusText: 'Not Found'
          });
        }
      })()
    );
  }
});

/**
 * Skip waiting handler
 * Allows immediate activation of new service worker version
 */
self.addEventListener('install', () => {
  self.skipWaiting();
});

/**
 * Activation event handler
 * Cleans up old caches when new service worker activates
 * Only removes caches not prefixed with 'workbox-'
 */
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then(keys => 
      Promise.all(
        keys
          .filter(key => !key.startsWith('workbox-'))
          .map(key => caches.delete(key))
      )
    )
  );
});
